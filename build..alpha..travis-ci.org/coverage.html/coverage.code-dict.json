{"/home/travis/build/npmtest/node-npmtest-cradle/test.js":"/* istanbul instrument in package npmtest_cradle */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cradle/lib.npmtest_cradle.js":"/* istanbul instrument in package npmtest_cradle */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cradle = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cradle = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cradle/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cradle && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cradle */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cradle\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cradle.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cradle.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cradle.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cradle.__dirname + '/lib.npmtest_cradle.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cradle/node_modules/cradle/lib/cradle.js":"var events = require('events'),\n    fs = require('fs'),\n    path = require('path'),\n    url = require('url'),\n    http = require('http'),\n    https = require('https'),\n    querystring = require('querystring'),\n    request = require('request');\n\nvar cradle = exports;\n\ncradle.extend   = require('./cradle/response').extend;\ncradle.Response = require('./cradle/response').Response;\ncradle.Cache    = require('./cradle/cache').Cache;\ncradle.Database = require('./cradle/database').Database;\ncradle.CouchError = require('./cradle/errors').CouchError;\n\ncradle.host = '127.0.0.1';\ncradle.port = 5984;\ncradle.auth = null;\ncradle.ca = null;\ncradle.options = {\n    cache: true,\n    raw: false,\n    secure: false,\n    retries: 0,\n    retryTimeout: 10e3,\n    forceSave: true,\n    headers: {}\n};\n\ncradle.setup = function (settings) {\n    this.host = settings.host;\n    this.auth = settings.auth;\n    if (settings.port) {\n        this.port = parseInt(settings.port, 10);\n    }\n    cradle.merge(this.options, settings);\n\n    return this;\n};\n\nvar protocolPattern = /^(https?):\\/\\//;\n\ncradle.Connection = function Connection(/* variable args */) {\n    var args = Array.prototype.slice.call(arguments),\n        options = {},\n        remote,\n        match,\n        host,\n        port,\n        ca,\n        agentOptions = {},\n        auth;\n\n    args.forEach(function (a) {\n        if (typeof(a) === 'number' || (typeof(a) === 'string' && /^\\d{2,5}$/.test(a))) {\n            port = parseInt(a);\n        } else if (typeof(a) === 'object') {\n            options = a;\n            host = host || options.hostname || options.host;\n            port = port || options.port;\n            auth = options.auth;\n            ca = options.ca;\n        } else {\n            host = a;\n\n            if (match = host.match(/^(.+)\\:(\\d{2,5})$/)) {\n                host = match[1];\n                port = parseInt(match[2]);\n            }\n        }\n    });\n\n    if (typeof auth == \"string\") {\n        // probaby via a url.parse()\n        var userpass = auth.split(\":\");\n        auth = {};\n        auth.username = userpass[0];\n        auth.password = userpass[1] || null;\n    }\n\n    this.host    = host || cradle.host;\n    this.port    = port || cradle.port;\n    this.auth    = auth || cradle.auth;\n    this.ca      = ca   || cradle.ca;\n    this.options = cradle.merge({}, cradle.options, options);\n\n    this.options.maxSockets = this.options.maxSockets || 20;\n    this.options.secure     = this.options.secure     || this.options.ssl;\n\n    if (protocolPattern.test(this.host)) {\n        this.protocol = this.host.match(protocolPattern)[1];\n        this.host     = this.host.replace(protocolPattern, '');\n    }\n\n    if (this.protocol === 'https') this.options.secure = true;\n\n    if (!this.protocol) {\n        this.protocol = (this.options.secure) ? 'https' : 'http';\n    }\n\n    if (this.options.ssl) { // Deprecation warning\n        console.log('Warning: \"ssl\" option is deprecated. Use \"secure\" instead.');\n    }\n\n    agentOptions.host = this.host;\n    agentOptions.port = this.port;\n    if (this.options.secure) {\n        this.transport = https;\n        if (this.ca) {\n            agentOptions.ca = this.ca;\n        }\n    } else {\n        this.transport = http;\n    }\n    this.agent = new (this.transport.Agent)(agentOptions);\n\n    this.agent.maxSockets = this.options.maxSockets;\n};\n\n//\n// Connection.rawRequest()\n//\n//      This is a base wrapper around connections to CouchDB. Given that it handles\n//      *all* requests, including those for attachments, it knows nothing about\n//      JSON serialization and does not presuppose it is sending or receiving JSON\n//      content\n//\n// OLDAPI: function (method, path, options, data, headers)\n//\ncradle.Connection.prototype.rawRequest = function (options, callback) {\n    var promise = new(events.EventEmitter),\n        self = this;\n\n    // HTTP Headers\n    options.headers = options.headers || {};\n\n    // Set HTTP Basic Auth\n    if (this.auth) {\n        options.auth = this.auth;\n    }\n\n    // Set client-wide headers\n    Object.keys(this.options.headers).forEach(function (header) {\n        options.headers[header] = self.options.headers[header];\n    });\n\n    if (options.query && Object.keys(options.query).length) {\n        for (var k in options.query) {\n            if (typeof(options.query[k]) === 'boolean') {\n                options.query[k] = String(options.query[k]);\n            }\n        }\n        options.path += '?' + querystring.stringify(options.query);\n    }\n\n    options.headers['Connection'] = options.headers['Connection'] || 'keep-alive';\n    options.agent = this.agent;\n    options.uri = this._url(options.path);\n    delete options.path;\n    options = cradle.merge(this.options.request || {}, options);\n\n    return request(options, callback || function () { });\n};\n\n//\n// Connection.close()\n//\n//      Close all underlying sockets associated with the agent for the connection.\n//\ncradle.Connection.prototype.close = function () {\n  this.agent.sockets.forEach(function (socket) {\n      socket.end();\n  });\n}\n\n//\n// Connection.request()\n//\n//      This is the entry point for all requests to CouchDB, at this point,\n//      the database name has been embed in the url, by one of the wrappers.\n//\ncradle.Connection.prototype.request = function (options, callback) {\n    var headers = cradle.merge({ host: this.host }, options.headers || {}),\n        self = this;\n\n    callback = callback || function () {};\n\n    // HTTP Headers\n    options.headers = options.headers || {};\n\n    //\n    // Handle POST/PUT data. We also convert functions to strings,\n    // so they can be used in _design documents.\n    //\n    if (options.body) {\n        options.body = JSON.stringify(options.body, function (k, val) {\n            if (typeof(val) === 'function') {\n                return val.toString();\n            } else { return val }\n        });\n        options.headers[\"Content-Length\"] = Buffer.byteLength(options.body);\n        options.headers[\"Content-Type\"]   = \"application/json\";\n    }\n\n    if (options.method === \"DELETE\" && !options.headers[\"Content-Length\"]) {\n        options.headers[\"Content-Length\"] = 0;\n    }\n\n    var attempts = 0;\n    return this.rawRequest(options, function _onResponse(err, res, body) {\n        attempts++;\n        if (err) {\n            if (self.options.retries &&\n              (!options.method || options.method.toLowerCase() === 'get' || options.body) &&\n              String(err.code).indexOf('ECONN') === 0 && attempts <= self.options.retries\n            ) {\n              return setTimeout(\n                  self.rawRequest.bind(self, options, _onResponse),\n                  self.options.retryTimeout\n              );\n            }\n            return callback(err);\n        }\n        else if (options.method === 'HEAD') {\n            return callback(null, res.headers, res.statusCode);\n        }\n        else if (body && body.error) {\n            cradle.extend(body, { headers: res.headers });\n            body.headers.status = res.statusCode;\n            return callback(new cradle.CouchError(body));\n        }\n\n        try { body = JSON.parse(body) }\n        catch (err) { }\n\n        if (body && body.error) {\n            cradle.extend(body, { headers: res.headers });\n            body.headers.status = res.statusCode;\n            return callback(new cradle.CouchError(body));\n        }\n\n        callback(null, self.options.raw ? body : new cradle.Response(body, res));\n    });\n};\n\n//\n// The database object\n//\n//      We return an object with database functions,\n//      closing around the `name` argument.\n//\ncradle.Connection.prototype.database = function (name) {\n    return new cradle.Database(name, this)\n};\n\n//\n// Wrapper functions for the server API\n//\ncradle.Connection.prototype.databases = function (callback) {\n    this.request({ path: '/_all_dbs' }, callback);\n};\ncradle.Connection.prototype.config = function (callback) {\n    this.request({ path: '/_config' }, callback);\n};\ncradle.Connection.prototype.info = function (callback) {\n    this.request({ path: '/' }, callback);\n};\ncradle.Connection.prototype.stats = function (callback) {\n    this.request({ path: '/_stats' }, callback);\n};\ncradle.Connection.prototype.activeTasks = function (callback) {\n    this.request({ path: '/_active_tasks' }, callback);\n};\ncradle.Connection.prototype.uuids = function (count, callback) {\n    if (typeof(count) === 'function') {\n        callback = count;\n        count = null;\n    }\n\n    this.request({\n        method: 'GET',\n        path: '/_uuids',\n        query: count ? { count: count } : {}\n    }, callback);\n};\ncradle.Connection.prototype.replicate = function (options, callback) {\n    this.request({\n        method: 'POST',\n        path: '/_replicate',\n        body: options\n    }, callback);\n};\n\ncradle.Connection.prototype._url = function (path) {\n    var url = (this.protocol || 'http') + '://' + this.host;\n    if (this.port !== 443 && this.port !== 80) {\n        url += ':' + this.port;\n    }\n\n    url += path[0] === '/' ? path : ('/' + path);\n    return url;\n}\n\ncradle.escape = function (id) {\n    return ['_design', '_changes', '_temp_view'].indexOf(id.split('/')[0]) === -1\n        ? querystring.escape(id)\n        : id;\n};\n\ncradle.merge = function (target) {\n    var objs = Array.prototype.slice.call(arguments, 1);\n    objs.forEach(function (o) {\n        Object.keys(o).forEach(function (attr) {\n            if (! o.__lookupGetter__(attr)) {\n                target[attr] = o[attr];\n            }\n        });\n    });\n    return target;\n};\n","/home/travis/build/npmtest/node-npmtest-cradle/node_modules/cradle/lib/cradle/response.js":"/*jshint node:true */\n\n//\n// HTTP response wrapper\n//\n//      It allows us to call array-like methods on documents\n//      with a 'row' attribute.\n//\nthis.Response = function Response(json, response) {\n    var obj, headers;\n\n    // If there's an _id key, it's the result\n    // of a document retrieval.\n    // Avoid potential key collisions.\n    if (!json._id) {\n        // If there's rows, this is the result\n        // of a view function.\n        // We want to return this as an Array.\n        if (json.rows) {\n            obj           = json.rows.slice(0);\n            obj.__proto__ = new(Array);\n            if (json && typeof json === 'object') {\n                Object.keys(json).forEach(function (k) {\n                    Object.defineProperty(obj.__proto__, k, {\n                        value:      json[k],\n                        enumerable: false\n                    });\n                });\n            }\n        } else if (json.results) {\n            obj = json.results.slice(0);\n            obj.__proto__ = new(Array);\n            obj.last_seq  = json.last_seq;\n        } else if (json.uuids) {\n            obj           = json.uuids;\n            obj.__proto__ = new(Array);\n        } else if (Array.isArray(json)) {\n            obj           = json.slice(0);\n            obj.__proto__ = new(Array);\n        }\n    }\n\n    if (!obj) {\n        obj           = {};\n        obj.__proto__ = new(Object);\n        if (json && typeof json === 'object') {\n            Object.keys(json).forEach(function (k) {\n                obj[k] = json[k];\n            });\n        }\n    }\n\n    // If the response was originally a document,\n    // give access to it via the 'json' getter.\n    if (!Array.isArray(json) && !obj.json) {\n        Object.defineProperty(obj, 'json', {\n            value: json,\n            enumerable: false\n        });\n    }\n\n    if (response) {\n        headers = { status: response.statusCode };\n        Object.keys(response.headers).forEach(function (k) {\n            headers[k] = response.headers[k];\n        });\n\n        // Set the 'headers' special field, with the response's status code.\n        exports.extend(obj, 'headers' in obj ? { _headers: headers }\n                                             : {  headers: headers });\n    }\n\n    // Alias '_rev' and '_id'\n    if (obj.id && obj.rev) {\n        exports.extend(obj, { _id:  obj.id, _rev: obj.rev });\n    } else if (obj._id && obj._rev) {\n        exports.extend(obj, { id:  obj._id, rev: obj._rev });\n    }\n\n    if (Array.isArray(obj) && json.rows) {\n        exports.extend(obj, exports.collectionPrototype);\n    }\n    exports.extend(obj, exports.basePrototype);\n\n    // Set the constructor to be this function\n    Object.defineProperty(obj, 'constructor', {\n        value: arguments.callee\n    });\n\n    return obj;\n};\n\nthis.basePrototype = {\n    toJSON: function () {\n        return this;\n    },\n    toString: function () {\n        return JSON.stringify(this);\n    }\n};\n\nthis.collectionPrototype = {\n    forEach: function (f) {\n        for (var i = 0, value; i < this.length; i++) {\n            value = this[i].doc || this[i].json || this[i].value || this[i];\n            if (f.length === 1) {\n                f.call(this[i], value);\n            } else {\n                f.call(this[i], this[i].key, value, this[i].id);\n            }\n        }\n    },\n    map: function (f) {\n        var ary = [];\n        if (f.length === 1) {\n            this.forEach(function (a) { ary.push(f.call(this, a)); });\n        } else {\n            this.forEach(function () { ary.push(f.apply(this, arguments)); });\n        }\n        return ary;\n    },\n    toArray: function () {\n        return this.map(function (k, v) { return v; });\n    }\n};\n\nthis.extend = function (obj, properties) {\n    var descriptor = Object.keys(properties).reduce(function (hash, k) {\n        hash[k] = {\n            value: properties[k],\n            enumerable: false\n        };\n        return hash;\n    }, {});\n    return Object.defineProperties(obj, descriptor);\n};\n","/home/travis/build/npmtest/node-npmtest-cradle/node_modules/cradle/lib/cradle/cache.js":"/*jshint node:true */\n\nvar Response = require('./response').Response;\n//\n// Each database object has its own cache store.\n// The cache.* methods are all wrappers around\n// `cache.query`, which transparently checks if\n// caching is enabled, before performing any action.\n//\nthis.Cache = function (options) {\n    var that = this;\n\n    this.store   = {};\n    this.options = options;\n    this.size = options.cacheSize || 0;\n    this.keys = 0;\n};\n\nthis.Cache.prototype = {\n    // API\n    get:   function (id)      { return this.query('get',   id); },\n    save:  function (id, doc) { return this.query('save',  id, doc); },\n    purge: function (id)      { return this.query('purge', id); },\n    has:   function (id)      { return this.query('has',   id); },\n\n    _get: function (id) {\n        var entry;\n\n        if (id in this.store) {\n            entry = this.store[id];\n            entry.atime = Date.now();\n\n            if (this.options.raw) {\n                return entry.document;\n            } else {\n                // If the document is already wrapped in a `Response`,\n                // just return it. Else, wrap it first. We clone the documents\n                // before returning them, to protect them from modification.\n                if (entry.document.toJSON) {\n                    return clone(entry.document);\n                } else {\n                    return new(Response)(clone(entry.document));\n                }\n            }\n        }\n    },\n    _has: function (id) {\n        return id in this.store;\n    },\n    _save: function (id, doc) {\n        if (! this._has(id)) {\n            this.keys ++;\n            this.prune();\n        }\n\n        this.store[id] = {\n            atime:    Date.now(),\n            document: doc\n        };\n\n        return this.store[id];\n    },\n    _purge: function (id) {\n        if (id) {\n            delete(this.store[id]);\n            this.keys --;\n        } else {\n            this.store = {};\n        }\n    },\n    query: function (op, id, doc) {\n        if (this.options.cache) {\n            return this['_' + op](id, doc);\n        } else {\n            return false;\n        }\n    },\n    prune: function () {\n        var that = this;\n        if (this.size && this.keys > this.size) {\n            process.nextTick(function () {\n                var store  = that.store,\n                    keys   = Object.keys(store),\n                    pruned = Math.ceil(that.size / 8);\n\n                keys.sort(function (a, b) {\n                    return store[a].atime > store[b].atime ? 1 : -1;\n                });\n\n                for (var i = 0; i < pruned; i++) {\n                    delete(store[keys[i]]);\n                }\n                that.keys -= pruned;\n            });\n        }\n    }\n};\n\nfunction clone(obj) {\n    return Object.keys(obj).reduce(function (clone, k) {\n        if (! obj.__lookupGetter__(k)) {\n            clone[k] = obj[k];\n        }\n        return clone;\n    }, {});\n}\n","/home/travis/build/npmtest/node-npmtest-cradle/node_modules/cradle/lib/cradle/database/index.js":"/*jshint node:true */\n\nvar querystring = require('querystring'),\n    Args = require('vargs').Constructor,\n    cradle = require('../../cradle');\n\nvar Database = exports.Database = function (name, connection) {\n    this.connection = connection;\n    this.name = encodeURIComponent(name);\n    this.cache = new (cradle.Cache)(connection.options);\n};\n\n// A wrapper around `Connection.request`,\n// which prepends the database name.\nDatabase.prototype.query = function (options, callback) {\n    options.path = [this.name, options.path].filter(Boolean).join('/');\n    return this.connection.request(options, callback);\n};\n\nDatabase.prototype.exists = function (callback) {\n    this.query({ method: 'HEAD' }, function (err, res, status) {\n        if (err) {\n            callback(err);\n        } else {\n            if (status < 200 || status > 300) {\n                callback(null, false);\n            } else {\n                callback(null, true);\n            }\n        }\n    });\n};\n\nDatabase.prototype.replicate = function (target, options, callback) {\n    if (typeof(options) === 'function') {\n        callback = options;\n        options = {};\n    }\n    this.connection.replicate(cradle.merge({ source: this.name, target: target }, options), callback);\n};\n\nDatabase.prototype.info = function (callback) {\n    this.query({ method: 'GET' }, callback);\n};\n\nDatabase.prototype.create = function (callback) {\n    this.query({ method: 'PUT' }, callback);\n};\n\n// Destroys a database with 'DELETE'\n// we raise an exception if arguments were supplied,\n// as we don't want users to confuse this function with `remove`.\nDatabase.prototype.destroy = function (callback) {\n    if (arguments.length > 1) {\n        throw new(Error)(\"destroy() doesn't take any additional arguments\");\n    }\n\n    this.query({\n        method: 'DELETE',\n        path: '/',\n    }, callback);\n};\n\n//\n// Extend the Database prototype with Couch features\n//\nrequire('./attachments');\nrequire('./changes');\nrequire('./documents');\nrequire('./views');\n","/home/travis/build/npmtest/node-npmtest-cradle/node_modules/cradle/lib/cradle/database/attachments.js":"/*jshint node:true */\n\nvar querystring = require('querystring'),\n    Args = require('vargs').Constructor,\n    cradle = require('../../cradle'),\n    Database = require('./index').Database;\n\nDatabase.prototype.getAttachment = function (id, attachmentName, callback) {\n    //\n    // TODO: Update cache?\n    //\n    return this.connection.rawRequest({\n        method: 'GET',\n        path: '/' + [this.name, querystring.escape(id), attachmentName].join('/'),\n        encoding: null\n    }, callback);\n};\n\nDatabase.prototype.removeAttachment = function (doc, attachmentName, callback) {\n    var params,\n        rev,\n        id,\n        error;\n\n    if (typeof doc === 'string') {\n        id = doc;\n    } else {\n        id  = doc.id  || doc._id;\n        rev = doc.rev || doc._rev;\n    }\n\n    if (!id) {\n        error = new(TypeError)(\"first argument must be a document id\");\n        if (!callback) {\n            throw error;\n        }\n        return callback(error);\n    }\n\n    if (!rev && this.cache.has(id)) {\n        rev = this.cache.get(id)._rev;\n    } else if (rev) {\n        rev = rev.replace(/\\\"/g, '');\n    }\n\n    this.query({\n        method: 'DELETE',\n        path: [querystring.escape(id), attachmentName].join('/'),\n        query: { rev: rev }\n    }, callback);\n};\n\nDatabase.prototype.saveAttachment = function (doc, attachment, callback) {\n    var attachmentName,\n        options = {},\n        self = this,\n        params,\n        error,\n        rev,\n        id;\n\n    if (typeof doc === 'string') {\n        id = doc;\n    } else {\n        id  = doc.id  || doc._id;\n        rev = doc.rev || doc._rev;\n    }\n\n    if (!id) {\n        error = new(TypeError)(\"Missing document id.\");\n        if (!callback) {\n            throw error;\n        }\n        return callback(error);\n    }\n\n    attachmentName = typeof attachment !== 'string' ? attachment.name : attachment;\n\n    if (!rev && this.cache.has(id)) {\n        params = { rev: this.cache.get(id)._rev };\n    } else if (rev) {\n        params = { rev: rev.replace(/\\\"/g, '') };\n    }\n\n    options.method = 'PUT';\n    options.path = '/' + [this.name, querystring.escape(id), attachmentName].join('/');\n    options.headers = {\n        'Content-Type': attachment['content-type'] ||\n            attachment.contentType ||\n            attachment['Content-Type'] ||\n            'text/plain'\n    };\n\n    if (attachment.contentLength) {\n        options.headers['Content-Length'] = attachment.contentLength;\n    }\n\n    if (attachment.body) {\n        options.body = attachment.body;\n    }\n\n    if (params) {\n        options.path += ('?' + querystring.stringify(params));\n    }\n\n    return this.connection.rawRequest(options, function (err, res, body) {\n        if (err) {\n            return callback(err);\n        }\n\n        var result = JSON.parse(body);\n        result.headers = res.headers;\n        result.headers.status = res.statusCode;\n\n        if (result.headers.status == 201) {\n            if (self.cache.has(id)) {\n                // FIXME: Is this supposed to be this.cached?\n                cached = self.cache.store[id].document;\n                cached._rev = result.rev;\n                cached._attachments = cached._attachments || {};\n                cached._attachments[attachmentName] = { stub: true };\n            }\n\n            return callback(null, result);\n        }\n\n        callback(result);\n    });\n};\n\n//\n// Alias `saveAttachment` to `addAttachment`\n//\nDatabase.prototype.addAttachment = Database.prototype.saveAttachment;\n","/home/travis/build/npmtest/node-npmtest-cradle/node_modules/cradle/lib/cradle/database/changes.js":"/*jshint node:true */\n\nvar events = require('events'),\n    querystring = require('querystring'),\n    Args = require('vargs').Constructor,\n    follow = require('follow'),\n    cradle = require('../../cradle'),\n    Database = require('./index').Database;\n\nDatabase.prototype.changes = function (options, callback) {\n    if (typeof(options) === 'function') {\n        callback = options;\n        options = {};\n    }\n\n    options = options || {};\n\n    if (callback) {\n        return this.query({\n            method: 'GET',\n            path: '_changes',\n            query: options\n        }, callback);\n    }\n\n    var response = new events.EventEmitter(),\n        responded = false,\n        protocol,\n        auth = '',\n        feed;\n\n    if (!options.db) {\n        protocol = this.connection.protocol || 'http';\n\n        if (this.connection.auth && this.connection.auth.username && this.connection.auth.password) {\n            auth = this.connection.auth.username + ':' + this.connection.auth.password + '@';\n        }\n\n        options.db = protocol + '://' + auth + this.connection.host + ':' + this.connection.port + '/' + this.name;\n    }\n\n    feed = new follow.Feed(options);\n    feed.on('change', function () {\n        //\n        // Remark: Support the legacy `data` events.\n        //\n        if (!responded) {\n            responded = true;\n            feed.emit('response', response);\n        }\n\n        response.emit.apply(response, ['data'].concat(Array.prototype.slice.call(arguments)));\n    });\n\n    if (options.follow !== false) {\n        feed.follow();\n    }\n\n    return feed;\n};\n","/home/travis/build/npmtest/node-npmtest-cradle/node_modules/cradle/lib/cradle/database/documents.js":"/*jshint node:true */\n\nvar querystring = require('querystring'),\n    Args = require('vargs').Constructor,\n    cradle = require('../../cradle'),\n    Database = require('./index').Database;\n\n//\n// Perform a HEAD request\n//\nDatabase.prototype.head = function (id, callback) {\n    this.query({\n        method: 'HEAD',\n        path: cradle.escape(id)\n    }, callback);\n};\n\n// Fetch either a single document from the database, or cache,\n// or multiple documents from the database.\n// If it's a single doc from the db, attempt to save it to the cache.\nDatabase.prototype.get = function (id, rev) {\n    var args = new (Args)(arguments),\n        options = null,\n        that = this;\n\n    if (Array.isArray(id)) { // Bulk GET\n        this.query({\n            method: 'POST',\n            path: '/_all_docs',\n            query: { include_docs: true },\n            body: { keys: id },\n        }, function (err, res) {\n            args.callback(err, res);\n        });\n    } else {\n        if (rev && args.length === 2) {\n            if (typeof(rev) === 'string') {\n                options = {\n                    rev: rev\n                };\n            } else if (typeof(rev) === 'object') {\n                options = rev;\n            }\n        } else if (this.cache.has(id)) {\n            return args.callback(null, this.cache.get(id));\n        }\n        this.query({\n            path: cradle.escape(id),\n            query: options\n        }, function (err, res) {\n            if (! err) that.cache.save(res.id, res.json);\n            args.callback(err, res);\n        });\n    }\n};\n\n//\n// PUT a document, and write through cache\n//\nDatabase.prototype.put = function (id, doc, callback) {\n    var cache = this.cache;\n    if (typeof(id) !== 'string') {\n        throw new(TypeError)(\"id must be a string\");\n    }\n    this.query({\n        method: 'PUT',\n        path: cradle.escape(id),\n        body: doc\n    }, function (e, res) {\n        if (! e) {\n            cache.save(id, cradle.merge({}, doc, { _id: id, _rev: res.rev }));\n        }\n        callback && callback(e, res);\n    });\n};\n\n//\n// POST a document, and write through cache\n//\nDatabase.prototype.post = function (doc, callback) {\n    var cache = this.cache;\n    this.query({\n        method: 'POST',\n        path: '/',\n        body: doc\n    }, function (e, res) {\n        if (! e) {\n            cache.save(res.id, cradle.merge({}, doc, { _id: res.id, _rev: res.rev }));\n        }\n        callback && callback(e, res);\n    });\n};\n\nDatabase.prototype.save = function (/* [id], [rev], doc | [doc, ...] */) {\n    var args = new(Args)(arguments),\n        array = args.all.slice(0), doc, id, rev;\n\n    if (Array.isArray(args.first)) {\n        doc = args.first;\n    } else {\n        doc = array.pop();\n        id  = array.shift();\n        rev = array.shift();\n    }\n    this._save(id, rev, doc, args.callback);\n};\n\nDatabase.prototype._save = function (id, rev, doc, callback) {\n    var options = this.connection.options;\n    var document = {}, that = this;\n\n    // Bulk Insert\n    if (Array.isArray(doc)) {\n        document.docs = doc;\n        if (options.allOrNothing) {\n            document.all_or_nothing = true;\n        }\n        this.query({\n            method: 'POST',\n            path: '/_bulk_docs',\n            body: document\n        }, callback);\n    } else {\n        if (!id && doc._id) {\n            id = doc._id;\n        }\n\n        // PUT a single document, with an id (Create or Update)\n        if (id) {\n            // Design document\n            if (/^_design\\/(\\w|%|\\-)+$/.test(id) && !('views' in doc)) {\n                document.language = \"javascript\";\n                document.views    =  doc;\n            } else {\n                document = doc;\n            }\n            // Try to set the '_rev' attribute of the document.\n            // If it wasn't passed, attempt to retrieve it from the cache.\n            rev && (document._rev = rev);\n\n            if (document._rev) {\n                this.put(id, document, callback);\n            } else if (this.cache.has(id)) {\n                document._rev = this.cache.get(id)._rev;\n                this.put(id, document, callback);\n            } else {\n                // Attempt to create a new document. If it fails,\n                // because an existing document with that _id exists (409),\n                // perform a HEAD, to get the _rev, and try to re-save.\n                this.put(id, document, function (e, res) {\n                    if (e && e.headers && e.headers.status === 409 && options.forceSave) { // Conflict\n                        that.head(id, function (e, headers, res) {\n                            if (res === 404 || !headers.etag) {\n                                return callback({ reason: 'not_found' });\n                            }\n\n                            document._rev = headers.etag.slice(1, -1);\n                            that.put(id, document, callback);\n                        });\n                    } else {\n                        callback(e, res);\n                    }\n                });\n            }\n        // POST a single document, without an id (Create)\n        } else {\n            this.post(doc, callback);\n        }\n    }\n};\n\nDatabase.prototype.merge = function (/* [id], doc */) {\n    var args     = Array.prototype.slice.call(arguments),\n        callback = args.pop(),\n        doc      = args.pop(),\n        id       = args.pop() || doc._id;\n\n    this._merge(id, doc, callback);\n};\n\nDatabase.prototype._merge = function (id, doc, callback) {\n    var that = this;\n    this.get(id, function (e, res) {\n        if (e) {\n            return callback(e);\n        }\n        doc = cradle.merge({}, res.json || res, doc);\n        that.save(id, res._rev, doc, callback);\n    });\n};\n\nDatabase.prototype.insert = function () {\n    throw new Error(\"`insert` is deprecated, use `save` instead\");\n};\n\n// Update document handler\n// body is an optional parameter for passing data in the body which is not limited by the\n// 8197 characters limit of the query parameter\nDatabase.prototype.update = function (path, id, options, body) {\n    var args = new(Args)(arguments);\n    path = path.split('/');\n\n    if (id) {\n      return this.query({\n        method: 'PUT',\n        path: ['_design', path[0], '_update', path[1], id].map(querystring.escape).join('/'),\n        query: options,\n        body: body\n      }, args.callback);\n    }\n\n    return this.query({\n        method: 'POST',\n        path: ['_design', path[0], '_update', path[1]].map(querystring.escape).join('/'),\n        query: options,\n        body: body\n    }, args.callback);\n};\n\n// Delete a document\n// If the _rev wasn't supplied, we attempt to retrieve it from the\n// cache. Otherwise, we attempt to get the _rev first. If the deletion\n// was successful, we purge the cache.\nDatabase.prototype.remove = function (id, rev) {\n    var that = this, doc, args = new(Args)(arguments);\n\n    //\n    // Removes the document with `id` at `rev`.\n    //\n    function remove() {\n        that.query({\n            method: 'DELETE',\n            path: cradle.escape(id),\n            query: { rev: rev }\n        }, function (err, res) {\n            if (! err) {\n                that.cache.purge(id);\n            }\n            args.callback(err, res);\n        });\n    }\n\n    if (typeof(rev) !== 'string') {\n        if (doc = this.cache.get(id)) {\n            rev = doc._rev;\n        }\n        else {\n            return this.get(id, function (err, _doc) {\n                if (err) {\n                    return args.callback(err);\n                }\n                else if (!_doc._rev) {\n                    return args.callback(new Error('No _rev found for ' + id));\n                }\n\n                rev = _doc._rev;\n                remove();\n            });\n        }\n    }\n\n    remove();\n};\n","/home/travis/build/npmtest/node-npmtest-cradle/node_modules/cradle/lib/cradle/database/views.js":"/*jshint node:true */\n\nvar querystring = require('querystring'),\n    Args = require('vargs').Constructor,\n    cradle = require('../../cradle'),\n    Database = require('./index').Database;\n\nDatabase.prototype.all = function (options, callback) {\n    if (arguments.length === 1) {\n      callback = options;\n      options = {};\n    }\n\n    return this._getOrPostView('/_all_docs', options, callback);\n};\n\n// Query a view, passing any options to the query string.\n// Some query string parameters' values have to be JSON-encoded.\nDatabase.prototype.view = function (path, options, callback) {\n    if (typeof options === 'function') {\n        callback = options;\n        options = {};\n    }\n\n    path = path.split('/');\n    path = ['_design', path[0], '_view', path[1]].map(querystring.escape).join('/');\n\n    return this._getOrPostView(path, options, callback);\n};\n\nDatabase.prototype.fti = function (path, options, callback) {\n    if (typeof options === 'function') {\n        callback = options;\n        options = {};\n    }\n\n    path = path.split('/');\n    path = ['_fti', 'local', this.name, '_design', path[0], path[1]].map(querystring.escape).join('/');\n\n    options = parseOptions(options);\n\n    this.connection.request({method: 'GET', path: path, query: options}, callback);\n};\n\nDatabase.prototype.temporaryView = function (doc, options, callback) {\n    if (!callback && typeof options === 'function') {\n        callback = options;\n        options = null;\n    }\n\n    if (options && typeof options === 'object') {\n        ['key', 'keys', 'startkey', 'endkey'].forEach(function (k) {\n            if (k in options) {\n                options[k] = JSON.stringify(options[k]);\n            }\n        });\n    }\n\n    return this.query({\n        method: 'POST',\n        path: '_temp_view',\n        query: options,\n        body: doc\n    }, callback);\n};\n\nDatabase.prototype.viewCleanup = function (callback) {\n    this.query({\n        method: 'POST',\n        path: '/_view_cleanup',\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }, callback);\n};\n\nDatabase.prototype.compact = function (design) {\n    this.query({\n        method: 'POST',\n        path: '/_compact' + (typeof(design) === 'string' ? '/' + querystring.escape(design) : ''),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }, Args.last(arguments));\n};\n\n// Query a list, passing any options to the query string.\n// Some query string parameters' values have to be JSON-encoded.\nDatabase.prototype.list = function (path, options) {\n    var callback = new(Args)(arguments).callback;\n        path = path.split('/');\n\n    this._getOrPostView(\n        ['_design', path[0], '_list', path[1], path[2]].map(querystring.escape).join('/'),\n        options,\n        callback\n    );\n};\n\n//\n// Helper function which parses options and makes either a `GET`\n// or `POST` request to `path` depending on if `options.keys` or\n// `options.body` is present.\n//\nDatabase.prototype._getOrPostView = function (path, options, callback) {\n    options = parseOptions(options);\n\n    if (options && options.body) {\n        var body = options.body;\n        delete options.body;\n\n        return this.query({\n            method: 'POST',\n            path: path,\n            query: options,\n            body: body\n        }, callback);\n    }\n\n    return this.query({\n        method: 'GET',\n        path: path,\n        query: options\n    }, callback);\n};\n\n//\n// Helper function for parsing and stringifying complex options\n// to pass to CouchDB.\n//\nfunction parseOptions(options) {\n    if (options && typeof options === 'object') {\n        options = cradle.merge({}, options);\n\n        ['key', 'startkey', 'endkey'].forEach(function (k) {\n            if (k in options) {\n                options[k] = JSON.stringify(options[k]);\n            }\n        });\n    }\n\n    if (options && options.keys) {\n        options.body = options.body || {};\n        options.body.keys = options.keys;\n        delete options.keys;\n    }\n\n    return options;\n}\n","/home/travis/build/npmtest/node-npmtest-cradle/node_modules/cradle/lib/cradle/errors.js":"/*jshint node:true */\n\nvar util = require('util');\n\n// create custom Error object for better callback(err, ...) support\n// accepts an JSON object from CouchDB's REST errors\nfunction CouchError (err) {\n\t// ensure proper stack trace\n\tError.call(this);\n\tError.captureStackTrace(this, this.constructor);\n\n\tthis.name = this.constructor.name;\n\tthis.message = err.error + ': ' + err.reason;\n\n\t// add properties from CouchDB error response to Error object\n\tfor (var k in err) {\n\t\tif (err.hasOwnProperty(k)) {\n\t\t\tthis[k] = err[k];\n\t\t}\n\t}\n    this.headers = err.headers;\n}\n// CouchError instanceof Error\nutil.inherits(CouchError, Error);\n\n\n// export\nthis.CouchError = CouchError;\n"}