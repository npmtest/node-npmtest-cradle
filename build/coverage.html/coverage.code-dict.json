{"/home/travis/build/npmtest/node-npmtest-cradle/test.js":"/* istanbul instrument in package npmtest_cradle */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cradle/lib.npmtest_cradle.js":"/* istanbul instrument in package npmtest_cradle */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cradle = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cradle = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cradle/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cradle && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cradle */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cradle\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cradle.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cradle.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cradle.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cradle.__dirname + '/lib.npmtest_cradle.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cradle/node_modules/cradle/lib/cradle.js":"var events = require('events'),\n    fs = require('fs'),\n    path = require('path'),\n    url = require('url'),\n    http = require('http'),\n    https = require('https'),\n    querystring = require('querystring'),\n    request = require('request');\n\nvar cradle = exports;\n\ncradle.extend   = require('./cradle/response').extend;\ncradle.Response = require('./cradle/response').Response;\ncradle.Cache    = require('./cradle/cache').Cache;\ncradle.Database = require('./cradle/database').Database;\ncradle.CouchError = require('./cradle/errors').CouchError;\n\ncradle.host = '127.0.0.1';\ncradle.port = 5984;\ncradle.auth = null;\ncradle.ca = null;\ncradle.options = {\n    cache: true,\n    raw: false,\n    secure: false,\n    retries: 0,\n    retryTimeout: 10e3,\n    forceSave: true,\n    headers: {}\n};\n\ncradle.setup = function (settings) {\n    this.host = settings.host;\n    this.auth = settings.auth;\n    if (settings.port) {\n        this.port = parseInt(settings.port, 10);\n    }\n    cradle.merge(this.options, settings);\n\n    return this;\n};\n\nvar protocolPattern = /^(https?):\\/\\//;\n\ncradle.Connection = function Connection(/* variable args */) {\n    var args = Array.prototype.slice.call(arguments),\n        options = {},\n        remote,\n        match,\n        host,\n        port,\n        ca,\n        agentOptions = {},\n        auth;\n\n    args.forEach(function (a) {\n        if (typeof(a) === 'number' || (typeof(a) === 'string' && /^\\d{2,5}$/.test(a))) {\n            port = parseInt(a);\n        } else if (typeof(a) === 'object') {\n            options = a;\n            host = host || options.hostname || options.host;\n            port = port || options.port;\n            auth = options.auth;\n            ca = options.ca;\n        } else {\n            host = a;\n\n            if (match = host.match(/^(.+)\\:(\\d{2,5})$/)) {\n                host = match[1];\n                port = parseInt(match[2]);\n            }\n        }\n    });\n\n    if (typeof auth == \"string\") {\n        // probaby via a url.parse()\n        var userpass = auth.split(\":\");\n        auth = {};\n        auth.username = userpass[0];\n        auth.password = userpass[1] || null;\n    }\n\n    this.host    = host || cradle.host;\n    this.port    = port || cradle.port;\n    this.auth    = auth || cradle.auth;\n    this.ca      = ca   || cradle.ca;\n    this.options = cradle.merge({}, cradle.options, options);\n\n    this.options.maxSockets = this.options.maxSockets || 20;\n    this.options.secure     = this.options.secure     || this.options.ssl;\n\n    if (protocolPattern.test(this.host)) {\n        this.protocol = this.host.match(protocolPattern)[1];\n        this.host     = this.host.replace(protocolPattern, '');\n    }\n\n    if (this.protocol === 'https') this.options.secure = true;\n\n    if (!this.protocol) {\n        this.protocol = (this.options.secure) ? 'https' : 'http';\n    }\n\n    if (this.options.ssl) { // Deprecation warning\n        console.log('Warning: \"ssl\" option is deprecated. Use \"secure\" instead.');\n    }\n\n    agentOptions.host = this.host;\n    agentOptions.port = this.port;\n    if (this.options.secure) {\n        this.transport = https;\n        if (this.ca) {\n            agentOptions.ca = this.ca;\n        }\n    } else {\n        this.transport = http;\n    }\n    this.agent = new (this.transport.Agent)(agentOptions);\n\n    this.agent.maxSockets = this.options.maxSockets;\n};\n\n//\n// Connection.rawRequest()\n//\n//      This is a base wrapper around connections to CouchDB. Given that it handles\n//      *all* requests, including those for attachments, it knows nothing about\n//      JSON serialization and does not presuppose it is sending or receiving JSON\n//      content\n//\n// OLDAPI: function (method, path, options, data, headers)\n//\ncradle.Connection.prototype.rawRequest = function (options, callback) {\n    var promise = new(events.EventEmitter),\n        self = this;\n\n    // HTTP Headers\n    options.headers = options.headers || {};\n\n    // Set HTTP Basic Auth\n    if (this.auth) {\n        options.auth = this.auth;\n    }\n\n    // Set client-wide headers\n    Object.keys(this.options.headers).forEach(function (header) {\n        options.headers[header] = self.options.headers[header];\n    });\n\n    if (options.query && Object.keys(options.query).length) {\n        for (var k in options.query) {\n            if (typeof(options.query[k]) === 'boolean') {\n                options.query[k] = String(options.query[k]);\n            }\n        }\n        options.path += '?' + querystring.stringify(options.query);\n    }\n\n    options.headers['Connection'] = options.headers['Connection'] || 'keep-alive';\n    options.agent = this.agent;\n    options.uri = this._url(options.path);\n    delete options.path;\n    options = cradle.merge(this.options.request || {}, options);\n\n    return request(options, callback || function () { });\n};\n\n//\n// Connection.close()\n//\n//      Close all underlying sockets associated with the agent for the connection.\n//\ncradle.Connection.prototype.close = function () {\n  this.agent.sockets.forEach(function (socket) {\n      socket.end();\n  });\n}\n\n//\n// Connection.request()\n//\n//      This is the entry point for all requests to CouchDB, at this point,\n//      the database name has been embed in the url, by one of the wrappers.\n//\ncradle.Connection.prototype.request = function (options, callback) {\n    var headers = cradle.merge({ host: this.host }, options.headers || {}),\n        self = this;\n\n    callback = callback || function () {};\n\n    // HTTP Headers\n    options.headers = options.headers || {};\n\n    //\n    // Handle POST/PUT data. We also convert functions to strings,\n    // so they can be used in _design documents.\n    //\n    if (options.body) {\n        options.body = JSON.stringify(options.body, function (k, val) {\n            if (typeof(val) === 'function') {\n                return val.toString();\n            } else { return val }\n        });\n        options.headers[\"Content-Length\"] = Buffer.byteLength(options.body);\n        options.headers[\"Content-Type\"]   = \"application/json\";\n    }\n\n    if (options.method === \"DELETE\" && !options.headers[\"Content-Length\"]) {\n        options.headers[\"Content-Length\"] = 0;\n    }\n\n    var attempts = 0;\n    return this.rawRequest(options, function _onResponse(err, res, body) {\n        attempts++;\n        if (err) {\n            if (self.options.retries &&\n              (!options.method || options.method.toLowerCase() === 'get' || options.body) &&\n              String(err.code).indexOf('ECONN') === 0 && attempts <= self.options.retries\n            ) {\n              return setTimeout(\n                  self.rawRequest.bind(self, options, _onResponse),\n                  self.options.retryTimeout\n              );\n            }\n            return callback(err);\n        }\n        else if (options.method === 'HEAD') {\n            return callback(null, res.headers, res.statusCode);\n        }\n        else if (body && body.error) {\n            cradle.extend(body, { headers: res.headers });\n            body.headers.status = res.statusCode;\n            return callback(new cradle.CouchError(body));\n        }\n\n        try { body = JSON.parse(body) }\n        catch (err) { }\n\n        if (body && body.error) {\n            cradle.extend(body, { headers: res.headers });\n            body.headers.status = res.statusCode;\n            return callback(new cradle.CouchError(body));\n        }\n\n        callback(null, self.options.raw ? body : new cradle.Response(body, res));\n    });\n};\n\n//\n// The database object\n//\n//      We return an object with database functions,\n//      closing around the `name` argument.\n//\ncradle.Connection.prototype.database = function (name) {\n    return new cradle.Database(name, this)\n};\n\n//\n// Wrapper functions for the server API\n//\ncradle.Connection.prototype.databases = function (callback) {\n    this.request({ path: '/_all_dbs' }, callback);\n};\ncradle.Connection.prototype.config = function (callback) {\n    this.request({ path: '/_config' }, callback);\n};\ncradle.Connection.prototype.info = function (callback) {\n    this.request({ path: '/' }, callback);\n};\ncradle.Connection.prototype.stats = function (callback) {\n    this.request({ path: '/_stats' }, callback);\n};\ncradle.Connection.prototype.activeTasks = function (callback) {\n    this.request({ path: '/_active_tasks' }, callback);\n};\ncradle.Connection.prototype.uuids = function (count, callback) {\n    if (typeof(count) === 'function') {\n        callback = count;\n        count = null;\n    }\n\n    this.request({\n        method: 'GET',\n        path: '/_uuids',\n        query: count ? { count: count } : {}\n    }, callback);\n};\ncradle.Connection.prototype.replicate = function (options, callback) {\n    this.request({\n        method: 'POST',\n        path: '/_replicate',\n        body: options\n    }, callback);\n};\n\ncradle.Connection.prototype._url = function (path) {\n    var url = (this.protocol || 'http') + '://' + this.host;\n    if (this.port !== 443 && this.port !== 80) {\n        url += ':' + this.port;\n    }\n\n    url += path[0] === '/' ? path : ('/' + path);\n    return url;\n}\n\ncradle.escape = function (id) {\n    return ['_design', '_changes', '_temp_view'].indexOf(id.split('/')[0]) === -1\n        ? querystring.escape(id)\n        : id;\n};\n\ncradle.merge = function (target) {\n    var objs = Array.prototype.slice.call(arguments, 1);\n    objs.forEach(function (o) {\n        Object.keys(o).forEach(function (attr) {\n            if (! o.__lookupGetter__(attr)) {\n                target[attr] = o[attr];\n            }\n        });\n    });\n    return target;\n};\n"}